---
import Layout from '../layouts/Layout.astro';
import '../assets/css/styledash.css';

---

<Layout title="Cerrando sesi√≥n...">
  <div class="logout-container">
    <!-- Estado inicial -->
    <div id="loading-state">
      <h2>Cerrando sesi√≥n...</h2>
      <p>Por favor espera</p>
      <div class="spinner"></div>
    </div>

    <!-- Estado de √©xito (oculto inicialmente) -->
    <div id="success-state" style="display: none;">
      <h2>Sesi√≥n cerrada correctamente</h2>
      <p>Redirigiendo al login...</p>
      <div class="spinner"></div>
    </div>

    <!-- Estado de error (oculto inicialmente) -->
    <div id="error-state" style="display: none;">
      <h2>Error al cerrar sesi√≥n</h2>
      <p id="error-message">Ocurri√≥ un error</p>
      <a href="/dashboard" class="btn">Volver al dashboard</a>
      <a href="/login" class="btn">Ir al login</a>
    </div>
  </div>

  <script>
    // Accede a la variable inyectada por Astro
    const apiUrl = import.meta.env.PUBLIC_API_URL;
    window.API_URL = apiUrl;
  </script>

  <!-- Script que se ejecuta en el CLIENTE -->
  <script is:inline>
    console.log('üîÑ Iniciando logout desde el cliente...');
    
    async function performLogout() {
      try {
        console.log('üì° Enviando request de logout...');
        
        const response = await fetch(`${window.API_URL}/api/auth/logout`, {
          method: 'POST',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        console.log('üì• Response status:', response.status);
        const data = await response.json();
        console.log('üì• Response data:', data);
        
        if (data.success) {
          console.log('‚úÖ Logout exitoso');
          
          // Mostrar estado de √©xito
          document.getElementById('loading-state').style.display = 'none';
          document.getElementById('success-state').style.display = 'block';
          
          // Limpiar datos del cliente
          if (typeof sessionStorage !== 'undefined') {
            sessionStorage.removeItem('userData');
            sessionStorage.clear();
          }
          if (typeof localStorage !== 'undefined') {
            localStorage.removeItem('rememberMe');
            localStorage.clear();
          }
          
          // Redirigir despu√©s de 2 segundos
          setTimeout(() => {
            console.log('üîÑ Redirigiendo al login...');
            window.location.href = '/login';
          }, 2000);
          
        } else {
          console.log('‚ùå Logout fall√≥:', data.message);
          showError(data.message || 'Error al cerrar sesi√≥n');
        }
        
      } catch (error) {
        console.error('‚ùå Error en logout:', error);
        showError('Error de conexi√≥n con el servidor');
      }
    }
    
    function showError(message) {
      document.getElementById('loading-state').style.display = 'none';
      document.getElementById('error-state').style.display = 'block';
      document.getElementById('error-message').textContent = message;
      
      setTimeout(() => {
        console.log('üîÑ Redirigiendo al login por timeout...');
        if (typeof sessionStorage !== 'undefined') sessionStorage.clear();
        if (typeof localStorage !== 'undefined') localStorage.clear();
        window.location.href = '/login';
      }, 5000);
    }
    
    // Ejecutar logout cuando la p√°gina cargue
    document.addEventListener('DOMContentLoaded', () => {
      console.log('üöÄ DOM cargado, ejecutando logout...');
      performLogout();
    });
    
    // Fallback: ejecutar inmediatamente si DOMContentLoaded ya pas√≥
    if (document.readyState === 'loading') {
      // DOM a√∫n cargando, el event listener funcionar√°
    } else {
      // DOM ya cargado, ejecutar inmediatamente
      console.log('üöÄ DOM ya cargado, ejecutando logout inmediatamente...');
      performLogout();
    }
  </script>

  <style>
    .logout-container {
      max-width: 600px;
      margin: 2rem auto;
      padding: 2rem;
      text-align: center;
    }
    
    .spinner {
      width: 50px;
      height: 50px;
      margin: 20px auto;
      border: 5px solid #f3f3f3;
      border-top: 5px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .btn {
      display: inline-block;
      margin: 0.5rem;
      padding: 0.75rem 1.5rem;
      background-color: #3498db;
      color: white;
      text-decoration: none;
      border-radius: 5px;
      transition: background-color 0.3s;
    }
    
    .btn:hover {
      background-color: #2980b9;
    }
  </style>
</Layout>