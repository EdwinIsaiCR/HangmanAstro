---
import Layout from "../layouts/Layout.astro";
import "../assets/css/styledash.css";
---

<Layout title="Cerrando sesi√≥n...">
  <div class="logout-container">
    <!-- Estado inicial -->
    <div id="loading-state">
      <div class="logout-content">
        <div class="logout-icon">üîí</div>
        <h2>Cerrando sesi√≥n...</h2>
        <p>Por favor espera un momento</p>
        <div class="spinner"></div>
      </div>
    </div>

    <!-- Estado de √©xito (oculto inicialmente) -->
    <div id="success-state" style="display: none;">
      <div class="logout-content success">
        <div class="logout-icon">‚úÖ</div>
        <h2>Sesi√≥n cerrada correctamente</h2>
        <p>
          Redirigiendo al login en <span id="countdown">3</span> segundos...
        </p>
        <div class="spinner"></div>
      </div>
    </div>

    <!-- Estado de error (oculto inicialmente) -->
    <div id="error-state" style="display: none;">
      <div class="logout-content error">
        <div class="logout-icon">‚ùå</div>
        <h2>Error al cerrar sesi√≥n</h2>
        <p id="error-message">Ocurri√≥ un error inesperado</p>
        <div class="button-group">
          <a href="/dashboard" class="btn btn-primary">Volver al dashboard</a>
          <a href="/login" class="btn btn-secondary">Ir al login</a>
          <button id="retry-btn" class="btn btn-outline">Reintentar</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Accede a la variable inyectada por Astro
    const apiUrl = import.meta.env.PUBLIC_API_URL;
    console.log("API URL:", apiUrl);

    window.API_URL = apiUrl;
  </script>

  <!-- Script que se ejecuta en el CLIENTE -->
  <script>

    let logoutAttempts = 0;
    const MAX_ATTEMPTS = 3;

    async function performLogout() {
      try {
        const response = await fetch(`${window.API_URL}/api/auth/logout`, {
          method: "POST",
          credentials: "include",
        });

        if (!response.ok) throw new Error("Logout failed");

        // Limpieza agresiva del lado del cliente
        localStorage.clear();
        sessionStorage.clear();

        // Forzar recarga para limpiar estado de la aplicaci√≥n
        window.location.href = "/login";
      } catch (error) {
        console.error("Logout error:", error);
        // Limpiar igualmente aunque falle el servidor
        localStorage.clear();
        sessionStorage.clear();
        window.location.href = "/login";
      }
    }

    function handleLogoutSuccess(data) {
      // Limpiar datos del cliente
      clearClientData();

      // Mostrar estado de √©xito
      showSuccessState();

      // Countdown y redirecci√≥n
      let countdown = 3;
      const countdownElement = document.getElementById("countdown");

      const countdownInterval = setInterval(() => {
        countdown--;
        if (countdownElement) {
          countdownElement.textContent = countdown;
        }

        if (countdown <= 0) {
          clearInterval(countdownInterval);
          console.log("üîÑ Redirigiendo al login...");
          window.location.href = "/login";
        }
      }, 1000);
    }

    function handleLogoutError(message) {
      console.error("‚ùå Error en logout:", message);

      if (logoutAttempts < MAX_ATTEMPTS) {
        console.log(
          `üîÑ Reintentando en 2 segundos... (${logoutAttempts}/${MAX_ATTEMPTS})`,
        );
        setTimeout(() => {
          performLogout();
        }, 2000);
        return;
      }

      // Si ya agotamos los reintentos, mostrar error
      showErrorState(message);

      // Auto-redirect despu√©s de 10 segundos
      setTimeout(() => {
        console.log("üîÑ Auto-redirigiendo al login por timeout...");
        clearClientData();
        window.location.href = "/login";
      }, 10000);
    }

    function clearClientData() {
      try {
        if (typeof sessionStorage !== "undefined") {
          sessionStorage.removeItem("userData");
          sessionStorage.clear();
          console.log("üßπ SessionStorage limpiado");
        }
        if (typeof localStorage !== "undefined") {
          localStorage.removeItem("rememberMe");
          localStorage.removeItem("userData");
          // No usar clear() para no afectar otros datos del sitio
          console.log("üßπ LocalStorage limpiado");
        }
      } catch (error) {
        console.warn("‚ö†Ô∏è Error al limpiar storage:", error);
      }
    }

    function showLoadingState() {
      document.getElementById("loading-state").style.display = "block";
      document.getElementById("success-state").style.display = "none";
      document.getElementById("error-state").style.display = "none";
    }

    function showSuccessState() {
      document.getElementById("loading-state").style.display = "none";
      document.getElementById("success-state").style.display = "block";
      document.getElementById("error-state").style.display = "none";
    }

    function showErrorState(message) {
      document.getElementById("loading-state").style.display = "none";
      document.getElementById("success-state").style.display = "none";
      document.getElementById("error-state").style.display = "block";

      const errorMessageElement = document.getElementById("error-message");
      if (errorMessageElement) {
        errorMessageElement.textContent = message;
      }
    }

    // Event listeners
    document.addEventListener("DOMContentLoaded", () => {
      console.log("üöÄ DOM cargado, ejecutando logout...");

      // Bot√≥n de reintentar
      const retryButton = document.getElementById("retry-btn");
      if (retryButton) {
        retryButton.addEventListener("click", () => {
          logoutAttempts = 0; // Reset attempts
          performLogout();
        });
      }

      // Iniciar logout
      performLogout();
    });

    // Fallback: ejecutar inmediatamente si DOMContentLoaded ya pas√≥
    if (document.readyState === "loading") {
      // DOM a√∫n cargando, el event listener funcionar√°
    } else {
      // DOM ya cargado, ejecutar inmediatamente
      console.log("üöÄ DOM ya cargado, ejecutando logout inmediatamente...");
      performLogout();
    }

    // Prevenir navegaci√≥n accidental durante el logout
    window.addEventListener("beforeunload", (e) => {
      if (document.getElementById("loading-state").style.display !== "none") {
        e.preventDefault();
        e.returnValue = "";
      }
    });
  </script>

  <style>
    .logout-container {
      max-width: 600px;
      margin: 2rem auto;
      padding: 2rem;
      text-align: center;
      min-height: 400px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .logout-content {
      width: 100%;
      padding: 2rem;
      border-radius: 12px;
      background: white;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .logout-content.success {
      border: 2px solid #10b981;
      background: #f0fdf4;
    }

    .logout-content.error {
      border: 2px solid #ef4444;
      background: #fef2f2;
    }

    .logout-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
    }

    .spinner {
      width: 50px;
      height: 50px;
      margin: 20px auto;
      border: 5px solid #f3f3f3;
      border-top: 5px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }

    .button-group {
      margin-top: 2rem;
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    .btn {
      display: inline-block;
      padding: 0.75rem 1.5rem;
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s;
      font-weight: 500;
      border: none;
      cursor: pointer;
      font-size: 0.9rem;
    }

    .btn-primary {
      background-color: #3498db;
      color: white;
    }

    .btn-primary:hover {
      background-color: #2980b9;
    }

    .btn-secondary {
      background-color: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background-color: #545b62;
    }

    .btn-outline {
      background-color: transparent;
      color: #3498db;
      border: 2px solid #3498db;
    }

    .btn-outline:hover {
      background-color: #3498db;
      color: white;
    }

    #countdown {
      font-weight: bold;
      color: #10b981;
    }

    @media (max-width: 768px) {
      .logout-container {
        margin: 1rem;
        padding: 1rem;
      }

      .button-group {
        flex-direction: column;
        align-items: center;
      }

      .btn {
        width: 200px;
      }
    }
  </style>
</Layout>
