---
import Layout from '../layouts/Layout.astro';
import '../assets/css/login.css';
---

<Layout title={"Registrar usuario"}>
  <div class="login-root">
    <div class="box-root flex-flex flex-direction--column" style="min-height: 100vh;flex-grow: 1;">
      <div class="loginbackground box-background--white padding-top--64">
        <div class="loginbackground-gridContainer">
          <div class="box-root flex-flex" style="grid-area: top / start / 8 / end;">
            <div class="box-root"
              style="background-image: linear-gradient(white 0%, rgb(247, 250, 252) 33%); flex-grow: 1;">
            </div>
          </div>
          <div class="box-root flex-flex" style="grid-area: 4 / 2 / auto / 5;">
            <div class="box-root box-divider--light-all-2 animationLeftRight tans3s" style="flex-grow: 1;"></div>
          </div>
          <div class="box-root flex-flex" style="grid-area: 6 / start / auto / 2;">
            <div class="box-root box-background--blue800" style="flex-grow: 1;"></div>
          </div>
          <div class="box-root flex-flex" style="grid-area: 7 / start / auto / 4;">
            <div class="box-root box-background--blue animationLeftRight" style="flex-grow: 1;"></div>
          </div>
          <div class="box-root flex-flex" style="grid-area: 8 / 4 / auto / 6;">
            <div class="box-root box-background--gray100 animationLeftRight tans3s" style="flex-grow: 1;"></div>
          </div>
          <div class="box-root flex-flex" style="grid-area: 2 / 15 / auto / end;">
            <div class="box-root box-background--cyan200 animationRightLeft tans4s" style="flex-grow: 1;"></div>
          </div>
          <div class="box-root flex-flex" style="grid-area: 3 / 14 / auto / end;">
            <div class="box-root box-background--blue animationRightLeft" style="flex-grow: 1;"></div>
          </div>
          <div class="box-root flex-flex" style="grid-area: 4 / 17 / auto / 20;">
            <div class="box-root box-background--gray100 animationRightLeft tans4s" style="flex-grow: 1;"></div>
          </div>
          <div class="box-root flex-flex" style="grid-area: 5 / 14 / auto / 17;">
            <div class="box-root box-divider--light-all-2 animationRightLeft tans3s" style="flex-grow: 1;"></div>
          </div>
        </div>
      </div>

      <div class="box-root padding-top--24 flex-flex flex-direction--column" style="flex-grow: 1; z-index: 9;">
        <div class="box-root padding-top--48 padding-bottom--24 flex-flex flex-justifyContent--center">
          <h1><a href="/" rel="dofollow"></a></h1>
        </div>
        <div class="formbg-outer">
          <div class="formbg">
            <div class="formbg-inner padding-horizontal--48">
              <span class="padding-bottom--15">Crear una cuenta</span>
              <form id="register-form" class="padding-bottom--24">
                <div class="field padding-bottom--24">
                  <label for="email">Email</label>
                  <input type="email" name="email" id="email" placeholder="ej. user1@hotmail.com" autocomplete="off" required>
                </div>
                <div class="field padding-bottom--24">
                  <label for="name">Nombre</label>
                  <input type="text" name="name" id="name" placeholder="ej. Juan" autocomplete="off" required>
                </div>
                <div class="field padding-bottom--24">
                  <label for="lastname">Apellidos</label>
                  <input type="text" name="lastname" id="lastname" placeholder="ej. Perez Perez" autocomplete="off" required>
                </div>
                <div class="field padding-bottom--24">
                  <label for="school">Escuela</label>
                  <input type="text" name="school" id="school" placeholder="ej. CBTis 150" autocomplete="off" required>
                </div>
                <div class="field padding-bottom--24">
                  <label for="password">Contraseña</label>
                  <input type="password" name="password" id="password" placeholder="*******" autocomplete="off" required>
                </div>
                <div class="field padding-bottom--24">
                  <label for="confirmPassword">Confirmar contraseña</label>
                  <input type="password" name="confirmPassword" id="confirmPassword" placeholder="*******" autocomplete="off" required>
                </div>
                <p id="passwordMatchMessage"></p>
                <div class="field padding-bottom--24">
                  <label for="rol">Selecciona tu rol</label>
                  <select name="rol" id="rol" required>
                    <option value="">Selecciona una opción</option>
                    <option value="3">Alumno</option>
                    <option value="2">Docente</option>
                    <option value="4">Otro</option>
                  </select>
                </div>
                <p id="selectErrorMessage" style="color: red;"></p>
                <div class="field padding-bottom--24">
                  <button type="submit" class="btn">Registrate</button>
                </div>
              </form>
              <div class="links">
                ¿Ya tienes cuenta? <a href="/login">Inicia sesión</a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>

  <script>
    // Accede a la variable inyectada por Astro
    const apiUrl = import.meta.env.PUBLIC_API_URL;
    window.API_URL = apiUrl;
  </script>
  
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      // Asegurarse de que SweetAlert2 está cargado
      if (typeof Swal === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/sweetalert2@11';
        script.onload = initializeFormHandlers;
        document.head.appendChild(script);
      } else {
        initializeFormHandlers();
      }
      
      // Inicializar EmailJS si está disponible
      if (typeof emailjs !== 'undefined') {
        emailjs.init('O3AE29jtznmBCGcVO');
      } else {
        console.warn('EmailJS no se cargó correctamente');
      }
    });

    // Función para inicializar todos los manejadores del formulario
    function initializeFormHandlers() {
      document.getElementById("password").addEventListener("input", checkPasswordMatch);
      document.getElementById("confirmPassword").addEventListener("input", checkPasswordMatch);
      document.getElementById("rol").addEventListener("change", validateSelect);
      
      document.getElementById("register-form").addEventListener("submit", handleFormSubmit);
    }

    // Función para mostrar alerta de éxito
    function showSuccessAlert(name, email) {
      Swal.fire({
        icon: "success",
        title: "¡Exitoso!",
        html: `Registrado correctamente, se envió un correo a ${email}.<br>Si no lo ves en tu bandeja de entrada, revisa la carpeta de spam.`,
        confirmButtonColor: "#000000",
        confirmButtonText: `Iniciar sesión`,
        allowOutsideClick: false
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = "/";
        }
      });
    }

    // Función para mostrar alerta de email existente
    function showEmailExistsAlert() {
      Swal.fire({
        icon: "warning",
        title: "¡Advertencia!",
        text: "Este email ya está registrado. Por favor usa otro.",
        confirmButtonColor: "#000000",
        confirmButtonText: "Entendido"
      });
    }

    // Validación de contraseñas
    function checkPasswordMatch() {
      const password = document.getElementById("password").value;
      const confirmPassword = document.getElementById("confirmPassword").value;
      const message = document.getElementById("passwordMatchMessage");

      if (password === confirmPassword && password.length > 0) {
        message.style.color = "green";
        message.textContent = "Las contraseñas coinciden";
        return true;
      } else if (password.length > 0 || confirmPassword.length > 0) {
        message.style.color = "red";
        message.textContent = "Las contraseñas no coinciden";
        return false;
      }
      message.textContent = "";
      return false;
    }

    // Validación de selección de rol
    function validateSelect() {
      const selectElement = document.getElementById("rol");
      const errorMessage = document.getElementById("selectErrorMessage");

      if (selectElement.value === "") {
        errorMessage.textContent = "Por favor, selecciona tu rol.";
        return false;
      } else {
        errorMessage.textContent = "";
        return true;
      }
    }

    // Validación general del formulario
    function validateForm() {
      const isPasswordValid = checkPasswordMatch();
      const isSelectValid = validateSelect();
      
      return isPasswordValid && isSelectValid;
    }

    // Enviar email de bienvenida
    async function sendWelcomeEmail(name, email) {
      if (typeof emailjs === 'undefined') {
        console.warn('EmailJS no disponible');
        return false;
      }

      try {
        await emailjs.send("TeamHangmanG", "template_Hangman", {
          to_name: name,
          to_email: email
        });
        return true;
      } catch (error) {
        console.error('Error enviando email:', error);
        return false;
      }
    }

    // Manejar envío del formulario
    async function handleFormSubmit(e) {
      e.preventDefault();

      if (!validateForm()) {
        return;
      }

      const formData = {
        email: document.getElementById("email").value,
        name: document.getElementById("name").value,
        lastname: document.getElementById("lastname").value,
        school: document.getElementById("school").value,
        password: document.getElementById("password").value,
        rol: document.getElementById("rol").value
      };

      try {
        const loadingAlert = Swal.fire({
          title: "Registrando...",
          text: "Por favor espera",
          allowOutsideClick: false,
          showConfirmButton: false,
          willOpen: () => {
            Swal.showLoading();
          }
        });

        const response = await fetch(`${window.API_URL}/api/auth/register`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
          credentials: 'include'
        });

        loadingAlert.close();

        const data = await response.json();

        if (response.ok && data.success) {
          const emailSent = await sendWelcomeEmail(formData.name, formData.email);
          
          Swal.fire({
            icon: "success",
            title: "¡Registro exitoso!",
            html: emailSent 
              ? `Registrado correctamente, se envió un correo a ${formData.email}.<br>Si no lo ves, revisa spam.`
              : `Registro completado. ${emailSent === false ? 'El correo de bienvenida no pudo enviarse.' : ''}`,
            confirmButtonColor: "#000000",
            confirmButtonText: "Iniciar sesión",
            allowOutsideClick: false
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = "/login";
            }
          });
        } else if (response.status === 409) {
          showEmailExistsAlert();
        } else {
          throw new Error(data.message || 'Error en el registro');
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Ocurrió un error al registrar. Por favor intenta nuevamente.",
          confirmButtonColor: "#000000",
        });
      }
    }
  </script>
</Layout>